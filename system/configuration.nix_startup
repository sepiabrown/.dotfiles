# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).
#
# Installing NIXOS essential (https://nixos.org/manual/nixos/stable/#sec-installation) :
#
# Partitioning :
#
# sudo parted /dev/sda -- mklabel gpt # usually not ms-dos for modern computers
# sudo parted /dev/sda -- mkpart primary 512MiB -8GiB # main storage for most of the data, system, etc
# sudo parted /dev/sda -- mkpart primary linux-swap -8GiB 100% # Optional, swap is at the end!
# sudo parted /dev/sda -- mkpart ESP fat32 1MiB 512MiB # May not be needed for dual booting, booting partition in EFI System Partition
# sudo parted /dev/sda -- set 3 esp on # May not be needed for dual booting
#
# Formatting :
# sudo mkfs.ext4 -L nixos /dev/sda1
# sudo mkswap -L swap /dev/sda2 # Optional
# sudo mkfs.fat -F 32 -n boot /dev/sda3 # May not be needed for dual booting, fat32 for booting partition
# (For creating LVM volumes, the LVM commands, e.g., pvcreate, vgcreate, and lvcreate.)
#
# Mount and set for NixOS install :
# sudo mount /dev/disk/by-label/nixos /mnt
# sudo mkdir -p /mnt/boot
# sudo mount /dev/disk/by-label/boot /mnt/boot
# or
# sudo mount /dev/disk/by-label/EFI /mnt/boot # Dual booting on iMac
# sudo swapon /dev/sda2 # Optional
# or
# sudo dd if=/dev/zero of=/mnt/.swapfile bs=1024 count=2097152 # bs=1024: block size - 1KB; count=2097152: 1024x1024x2 – MB->GB->2GB
# sudo chmod 600 /mnt/.swapfile
# sudo swapon /mnt/.swapfile
#
# sudo nixos-generate-config --root /mnt
#
# Install:
# sudo nixos-install
# 
# Installing home-manager
# 
# nix-channel --add https://github.com/nix-community/home-manager/archive/release-21.05.tar.gz home-manager
# nix-channel --update


{ config, pkgs, ... }:

{ 
  system.copySystemConfiguration = true;  

  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      ./network.nix
      <home-manager/nixos> # test!
    ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.supportedFilesystems = [ "ntfs" ];

  networking = {
    hostName = "suwon-nix"; # Define your hostname.
    networkmanager = {
      enable = true;   # wpa_spplicant and networkmanager collide
      packages = [
        #????????????????????????????????????
        pkgs.networkmanager-l2tp
      ];
    };
    # wireless.enable = true;  # Enables wireless support via wpa_supplicant. Don't use with networkmanager

    # The global useDHCP flag is deprecated, therefore explicitly set to false here.
    # Per-interface useDHCP will be mandatory in the future, so this generated config
    # replicates the default behaviour.
    useDHCP = false;
    extraHosts = ''
    209.51.188.89 elpa.gnu.org
    '';

    # Device dependent options are in network.nix
    #
    # defaultGateway = "192.168.0.1";
    # nameservers = [ "147.46.80.1" ];
    # interfaces = {
    #   enp4s0f0.ipv4.addresses = [ { 
    #     address = "192.168.0.98";
    #     prefixLength = 24;
    #   } ]; 
    # };
  };

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Set your time zone.
  time.timeZone = "Asia/Seoul";

  # Select internationalisation properties.
  i18n.inputMethod.enabled = "uim";
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  # users.users.jane = {
  #   isNormalUser = true;
  #   extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
  # };

  # List packages installed in system profile. To search, run:
  # nix search wget
  environment.systemPackages = with pkgs; [
    # vimHugeX
    wget
    # firefox
    # git
    git-crypt
    # gnupg
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:
  services = {
    openssh.enable = true; # Enable the OpenSSH daemon.
    blueman.enable = true;
    xl2tpd.enable = true;
    xserver = { 
      enable = true; # Enable the X11 windowing system.
      # displayManager.defaultSession = "mate";
      # desktopManager.mate.enable = true;
      displayManager.sddm.enable = true;
      desktopManager.plasma5.enable = true;
      libinput.enable = true; # Enable touchpad support.
      
      # Configure keymap in X11
      layout = "us";
      xkbVariant = "dvorak";
      extraLayouts.us-greek = 
      let 
      custom_xkeyboard_config = pkgs.writeText "us-custom_xkeyboard" ''
        xkb_symbols "custom_xkeyboard"
        {
          include "us(dvorak)"
          key <ESC>  {	[ 		]	};
          key <AE07>  {	[ L, l	]	};
                                                                 
          key <CAPS> {	[ Super_R		]	};
          key <LWIN> {	[ Caps_Lock		]	};
          key <RTSH> {	[ Escape		]	};
          key <RWIN> {	[ NoSymbol		]	};
                                                                 
          modifier_map Mod3   { Super_R };
          modifier_map Mod4   { Super_L };
                                                                 
          include "kr(ralt_hangul)"
          include "kr(rctrl_hanja)"
        };
      '';
      # custom_xkeyboard_config = pkgs.writeTextFile {
      #   name = "us-custom_xkeyboard";
      #   text =  ''
      #     xkb_symbols "custom_xkeyboard"
      #     {
      #       include "us(dvorak)"
      #       key <ESC>  {	[ 		]	};
      #       key <AE07>  {	[ L, l	]	};
      #                                                              
      #       key <CAPS> {	[ Super_R		]	};
      #       key <LWIN> {	[ Caps_Lock		]	};
      #       key <RTSH> {	[ Escape		]	};
      #       key <RWIN> {	[ NoSymbol		]	};
      #                                                              
      #       modifier_map Mod3   { Super_R };
      #       modifier_map Mod4   { Super_L };
      #                                                              
      #       include "kr(ralt_hangul)"
      #       include "kr(rctrl_hanja)"
      #     };
      #   '';
      #   destination = "/symbols";
      # };
      in
      {
        description = "US layout with alt-gr greek";
        languages   = [ "eng" ];
        symbolsFile = us-greek_config;
      };
    };
  };

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Define a user account. 
  users = {
    users.sepiabrown = {
      isNormalUser = true;
      # initialPassword = "P@ssw@rd01"; # Idea from Will T. Don't forget to set a password with ‘passwd’.
      home = "/home/sepiabrown";
      hashedPassword = "$6$U4rwuO8Gycc$lOleYt0NLgOoUj2FrROHM1qu01joT1RhM2FLgnhqZGtNd0ALnbBY5DIzMH0EY1WFs2SEK4o8Z1H35M8nKpguP0";
      extraGroups = [ 
        "wheel"
        "networkmanager"
      ]; # Enable ‘sudo’ for the user.
    };
  };

  home-manager.users.sepiabrown = { pkgs, ... }: {
    home.packages = with pkgs; [ 
        
    ];

    programs = {

      vim = {
        enable = true;
      };

      alacritty = {
        enable = true;
        setting = {
          env.TERM = xterm-256color;
          window.dimensions = {
            lines = 3;
            columns = 200;
          };
          # key_bindings = [
          #   {
          #     key = "K";
          #     mods = "Control";
          #     chars = "\\x0c";
          #   }
          # ];
        };
        # setting in another way
        # home.file = {
        #   ".config/alacritty/alacritty.yaml".text = ''
        #     env:
        #       TERM: xterm-256color
        #     window:
        #       dimensions:
        #         lines : 3
        #         columns : 200
        #     key_bindings:
        #       - { key: K, mods: Control, chars: "\x0c"  }
        #   '';
        # };
      };

      git = {
        enable = true;
        userName = "sepiabrown";
        userEmail = "sepiabrown@naver.com";
      };

      gpg = {
        enable = true;
      };

      firefox = {
        enable = true;
      };
    };
    
    
  };
  nix.allowedUsers = [ "sepiabrown" ];
  security.sudo.extraConfig = ''
    %wheel      ALL=(ALL:ALL) NOPASSWD: ALL
  '';
  
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "21.05"; # Did you read the comment?

}

